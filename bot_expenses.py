#!/usr/bin/env python
# -*- coding: utf-8 -*-
import configparser
import datetime

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from data_base_queries import insert, output_data

config = configparser.ConfigParser()
config.read('Token.ini')

token = config['bot']['token']  # –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(token)

data_list = []
list_of_expenses = ["–µ–¥–∞", "–ø—Ä–æ–µ–∑–¥", "—Å–∏–≥–∞—Ä–µ—Ç—ã", "–ø—Ä–æ—á–µ–µ", "–∫–æ–º—É–Ω–∞–ª–∫–∞"]
reciepts_list = ["–∑–∞—Ä–ø–ª–∞—Ç–∞", '–ª–µ–≤–∞–∫', '—Ä–æ–¥–∏—Ç–µ–ª–∏']


# –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ —á—Ç–æ–± –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ª–∏–±–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# message.from_user.id not in some_data
@bot.message_handler(func=lambda message: int(message.from_user.id) != –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id)
def some(message):
    bot.send_message(message.chat.id, '—Ç—ã –Ω–µ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, –æ—Ç–≤–∞–ª–∏!')


@bot.message_handler(commands=['start'])
def bot_start(message):
    bot.send_message(message.chat.id,
                     f'hello {message.from_user.first_name} –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –∏–ª–∏ /output –¥–ª—è '
                     f'–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü—É')


@bot.message_handler(commands=['output'])
def output(message):
    date = datetime.datetime.now().strftime("%m-%Y")
    msg = output_data(f'%{date}')
    bot.send_message(message.chat.id, f'{msg}')


@bot.message_handler(content_types='text')
def check_input(message):
    try:
        user_sum_input = float(message.text)
        bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –∑–∞—á–∏—Å–ª–∏—Ç—å', reply_markup=table_markup())
        date = datetime.datetime.now().strftime("%d-%m-%Y")
        data_list.append(date)
        data_list.append(user_sum_input)
        if len(data_list) > 2:
            bot.send_message(message.chat.id,
                             "–≤—ã –≤–≤–µ–ª–∏ –±–æ–ª–µ–µ 1–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥–æ–≤, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–æ 1–π –∑–∞–ø–∏—Å–∏"
                             "–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")
            data_list.clear()

    except Exception as exp:
        bot.send_message(message.chat.id, '—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ')
        print(exp)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == '—Ä–∞—Å—Å—Ö–æ–¥—ã':
        bot.send_message(call.message.chat.id, '–Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?', reply_markup=type_expenses_markup())
    elif call.data in list_of_expenses:
        write_to_db('expenses', data_list, call.data)
        bot.send_message(call.message.chat.id, "–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        data_list.clear()
    elif call.data == "–¥–æ—Ö–æ–¥—ã":
        bot.send_message(call.message.chat.id, '–æ—Ç–∫—É–¥–∞ –¥–µ–Ω—å–≥–∏?', reply_markup=type_receipts_markup())
    elif call.data in reciepts_list:
        write_to_db('receipts', data_list, call.data)
        bot.send_message(call.message.chat.id, "–∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        data_list.clear()


def table_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("—Ä–∞—Å—Å—Ö–æ–¥—ã üí∞üìâ", callback_data="—Ä–∞—Å—Å—Ö–æ–¥—ã"),
               InlineKeyboardButton("–¥–æ—Ö–æ–¥—ã üí∞üìà", callback_data="–¥–æ—Ö–æ–¥—ã"))
    return markup


def type_expenses_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–µ–¥–∞ üç≤', callback_data="–µ–¥–∞"),
               InlineKeyboardButton('–ø—Ä–æ–µ–∑–¥ üöé', callback_data="–ø—Ä–æ–µ–∑–¥"),
               InlineKeyboardButton('—Å–∏–≥–∞—Ä–µ—Ç—ã üö¨', callback_data="—Å–∏–≥–∞—Ä–µ—Ç—ã"),
               InlineKeyboardButton('–ø—Ä–æ—á–µ–µ üõí', callback_data="–ø—Ä–æ—á–µ–µ"),
               InlineKeyboardButton('–∫–æ–º—É–Ω–∞–ª–∫–∞ üõÅ', callback_data="–∫–æ–º—É–Ω–∞–ª–∫–∞"))
    return markup


def type_receipts_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–∑–∞—Ä–ø–ª–∞—Ç–∞ üí≥', callback_data="–∑–∞—Ä–ø–ª–∞—Ç–∞"),
               InlineKeyboardButton('–ª–µ–≤–∞–∫ üó≥', callback_data='–ª–µ–≤–∞–∫'),
               InlineKeyboardButton('—Ä–æ–¥–∏—Ç–µ–ª–∏ ü§ù', callback_data='—Ä–æ–¥–∏—Ç–µ–ª–∏'))
    return markup


def write_to_db(table_name: str, list_of_data: list, call_data: str):
    list_of_data.append(call_data)
    return insert(table_name, tuple(list_of_data))


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        pass
        print('–Ω—É–∂–µ–Ω –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
